

from typing import Optional
from collections import deque

from typing import List

"""

definition of binary tree node.
class Node:
    def _init_(self,val):
        self.data = val
        self.left = None
        self.right = None
"""

class Solution:
    def paths(self, node, path, result):
        path.append(node.data)
        
        if not node.left and not node.right:
            result.append(path[:])  # Append a copy of path
        else:
            if node.left:
                self.paths(node.left, path, result)
            if node.right:
                self.paths(node.right, path, result)
        
        path.pop()
        
    def Paths(self, root):
        if not root:
            return []
        result = []
        self.paths(root, [], result)
        return result
