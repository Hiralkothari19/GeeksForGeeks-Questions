class Solution:
    def merge(self, root1, root2):
         
        
        def convert(n):
            if not n or (not n.left and not n.right):
                return n
            
            if n.left:
                l = convert(n.left)
                l.is_threaded = True
                l.right = n
            
            if not n.right:
                return n
            return convert(n.right)
            
        def left_most(n):
            while n and n.left:
                n = n.left
            return n
            
        def next(n):
            if getattr(n, 'is_threaded', False):
                n = n.right
            else:
                n = left_most(n.right)
            return n
        convert(root1) 
        convert(root2)
        c1, c2 = left_most(root1), left_most(root2)
        ans = []
        while c1 and c2:
            if c1.data < c2.data:
                ans.append(c1.data)
                c1 = next(c1)
            else:
                ans.append(c2.data)
                c2 = next(c2)
        while c1:
            ans.append(c1.data)
            c1 = next(c1)
        while c2:
            ans.append(c2.data)
            c2 = next(c2)
        return ans
