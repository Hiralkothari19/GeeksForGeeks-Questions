// User function Template for Java
/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/
// User function Template for Java
/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/

class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        ArrayList<Integer> result = new ArrayList<>();
        result.add(node.data);
        if(node.left!=null){
            leftSubTree(node.left,result);
        }
        leafTree(node,result);
        if(node.right!=null){
            rightSubTree(node.right,result);
        }
        return result;
        
    }
    
    void leftSubTree(Node node, ArrayList<Integer> list)
    {
        
        if(node==null || (node.left==null && node.right==null)){
            return;
        }
        list.add(node.data);
        if(node.left!=null){
            leftSubTree(node.left,list);
        }
        else{
            leftSubTree(node.right,list);
        }
    }
    
    void rightSubTree(Node node, ArrayList<Integer> list)
    {
        if(node==null || (node.left==null && node.right==null)){
            return;
        }
        if(node.right!=null){
            rightSubTree(node.right,list);
        }
        else{
            rightSubTree(node.left,list);
        }
        list.add(node.data);
    }
    
    void leafTree(Node node, ArrayList<Integer> list)
    {
        if(node==null){
            return;
        }
        if(node.left==null && node.right==null){
            if(list.get(0)!=node.data){
                list.add(node.data);
            }
        }
        leafTree(node.left,list);
        leafTree(node.right,list);
    }
}
